//  Part I

// ----------------------------
// write your own forEach() function that takes an array and a function
// ----------------------------

function forEach(array, callback){
    for (var i = 0; i < array.length; i++) {
    callback(array[i], i, array);
  }
}

//also works:
//function forEach(array, callback){
//    var v = 0;
//    for (var i = 0; i < array.length; i++) {
//    v = callback(array[i], i, array);
//  }
//  return v;
//}

// tests
// ---
var total = 1
forEach([1, 2, 3, 4], function(a){ total *= a; })
console.assert(total === 24)

// ----------------------------
// using forEach() from above, write your own reduce()
// that takes an array and a function

//forEach() executes the provided callback once for each element present in the array in ascending order.
// ----------------------------



function reduce(array, callback){
    var accumulator ;  //undefined
    forEach (array, function (value, i, callbackArray) {
      if (i===0) {accumulator = value; }

      if (i < array.length - 1) {
      accumulator += callback (accumulator, value); }
    });
      return accumulator;
    }

//BETTER:

function reduce(array, callback){
  var accumulator;
  forEach(array, function(value, i, callbackArray) {
    // If it is our first time through, use the first value
    if(i === 0) {
      accumulator = value;
    }
    // Otherwise,
    else if (i < array.length) {
      accumulator = callback(accumulator, value);
    }
  });
  return accumulator;
}


// tests
// ---
console.assert(reduce([1, 2, 3, 4], function(a, v){ return a*v ;}) === 24);

// ----------------------------
// using forEach() from above, write your own map()
// that takes an array and a function
// ----------------------------

function map(array, callback){
var returnArray = [];
forEach (array, function (array, i) {
  returnArray[i]= callback(array); }
);
  return returnArray;
}

// tests
// ---
var squares = map([1, 2, 3, 4], function(v){ return v*v ;});
console.assert(squares[0] === 1);
console.assert(squares[1] === 4);
console.assert(squares[2] === 9);
console.assert(squares[3] === 16);

// ----------------------------
// using reduce() from above, write your own filter()
// that takes an array and a function
// ----------------------------

function filter(array, callback){
var returnArray = [];
//a below is to hold the accumulator which always comes first
//when define function, reduce is running it and needs 2 arguments
reduce (array, function (a, b) {
  var val = callback(b);
  if (val) {
    returnArray.push(b);
  }
});
  return returnArray;
}

// tests
// ---
var evens = filter([1, 2, 3, 4], function(v){ return v%2 === 0 ;});
console.assert(evens[0] === 2);
console.assert(evens[1] === 4);

///the above works


// ----------------------------
// using reduce() from above, write your own sum()
// that adds up all arguments to sum (note: variadic behavior)
// ----------------------------

function sum(){
    // YOUR CODE HERE
}

// tests
// ---
console.assert(sum(1, 2, 3) === 6)
console.assert(sum(1, 2, 3, 4) === 10)
console.assert(sum(1, 2, 3, 4, 5) === 15)


//you will need this to be the first line of your sum(){...} function in FP1:
// `var args = (arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments));
//it gets all of the arguments passed into a function and converts them into an array.
//so if you had 100 arguments in a function, args would be an array of length 100
//the special array-like object `arguments` is a unicorn in javascript.
//It will always be set, and sometimes acts like it is an array, but unfortunately it is not.
//You will need the line above to actually convert it to an array.
//In ES6 we have some shortcuts for this, but since we’re using ES5,
//we must use the line above to convert from an array-like object into an actual array.



// ----------------------------
// using Array.sort(), sort the following array
// of people by name
// ----------------------------

var names = [
    {name:"Matt", alma_mater:"Univ of Texas - Austin"},
    {name:"Brian", alma_mater:"Texas A&M"},
    {name:"Jesse", alma_mater:"Univ of Texas - Austin"}
]

names.sort(function(a, b){
    // YOUR CODE HERE
})

// tests
// ---
console.assert(names[0].name === "Brian")
console.assert(names[1].name === "Jesse")
console.assert(names[2].name === "Matt")

//FP1’s sorting exercise. You can use charCodeAt(i) to get an integer representation of a character in a string.
//This will help to determine what letters fall before or after other letters:
//```var hello = 'abc';
//hello.charCodeAt(0);    // 97
//hello.charCodeAt(1);    // 98



// ----------------------------
// Using Array.map(), Array.filter(), and Array.sort() on the
// array below:
// - filter for customers whose first-names start with 'J',
// - map to their fullnames,
// - and then sort the items alphabetically by fullname
// ----------------------------

var customers = [
    { first: 'Joe', last: 'Blogs'},
    { first: 'John', last: 'Smith'},
    { first: 'Dave', last: 'Jones'},
    { first: 'Jack', last: 'White'}
]

var results = customers
    .filter(function(){
        // YOUR CODE HERE
    })
    .map(function(){
        // YOUR CODE HERE
    })
    .sort(function(){
        // YOUR CODE HERE
    })

// tests
// ---
console.assert(results[0].fullname === "Jack White")
console.assert(results[2].fullname === "John Smith")
